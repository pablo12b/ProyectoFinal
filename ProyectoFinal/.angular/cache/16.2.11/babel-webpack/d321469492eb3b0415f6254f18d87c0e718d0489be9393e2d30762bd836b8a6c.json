{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as jsPDF from 'jspdf';\nexport let CarritoComponent = class CarritoComponent {\n  constructor(carritosService, detallesServices, authService) {\n    this.carritosService = carritosService;\n    this.detallesServices = detallesServices;\n    this.authService = authService;\n    this.personaAutenticada = this.authService.getUsuarioAutenticado().correo;\n    this.codigoAutenticada = this.authService.getUsuarioAutenticado().codigo;\n  } // Inyecta tu servicio aquí\n  ngOnInit() {\n    this.carritos = this.carritosService.getCarrito(this.codigoAutenticada);\n    this.detalles = this.detallesServices.getDetalleCarrito(this.codigoAutenticada);\n  }\n  realizarCompra() {\n    // Asegúrate de que la imagen no se muestra en la impresión\n    document.querySelectorAll('.no-print').forEach(el => {\n      if (el instanceof HTMLElement) {\n        el.style.display = 'none';\n      }\n    });\n    // Encuentra el formulario que deseas imprimir\n    const formElement = document.getElementById('frm');\n    if (formElement) {\n      // Clona el formulario que deseas imprimir\n      const formToPrint = formElement.cloneNode(true);\n      // Asegúrate de que el clon es un elemento HTML para poder manipularlo\n      if (formToPrint instanceof HTMLElement) {\n        // Elimina todos los elementos con la clase 'no-print' del clon\n        formToPrint.querySelectorAll('.no-print').forEach(element => {\n          element.remove();\n        });\n        // Crea una nueva instancia de jsPDF\n        const doc = new jsPDF();\n        // Renderiza el clon en el PDF, no el formulario original\n        doc.fromHTML(formToPrint, 20, 5, {\n          'width': 170 // Asegúrate de establecer un ancho si es necesario\n        }, () => {\n          // Guarda el PDF\n          doc.save('Factura.pdf');\n        });\n        // Vuelve a mostrar los elementos que habían sido ocultados, si es necesario\n        document.querySelectorAll('.no-print').forEach(el => {\n          if (el instanceof HTMLElement) {\n            el.style.display = '';\n          }\n        });\n      }\n    } else {\n      console.error('El formulario con id \"frm\" no se encuentra en el DOM.');\n    }\n    this.detallesServices.crearFacturas(this.codigoAutenticada).subscribe(response => {\n      if (typeof response === 'string') {\n        // La respuesta es un mensaje de éxito como texto\n        console.log(response);\n        // Puedes mostrar este mensaje en tu interfaz de usuario si es necesario\n      } else {\n        // La respuesta es un objeto JSON válido, puedes manejarlo según corresponda\n        console.log(response);\n      }\n    }, error => {\n      console.error(error);\n      // Manejar el error según tus necesidades\n    });\n  }\n\n  eliminarDetalle(det) {\n    if (det.codigo !== undefined) {\n      const codigo = det.codigo;\n      this.carritosService.deleteDetalle(codigo).subscribe(result => {\n        console.log(result); // Muestra el mensaje de éxito en la consola\n        // Aquí puedes realizar acciones adicionales según el mensaje de éxito\n      }, error => {\n        console.error(error); // Muestra el error en la consola\n        // Manejar el error según tus necesidades\n      });\n    } else {\n      console.error('El código está indefinido.');\n      // Puedes manejar este caso según sea necesario, como lanzar una excepción o mostrar un mensaje de error\n    }\n  }\n};\n\nCarritoComponent = __decorate([Component({\n  selector: 'app-carrito',\n  templateUrl: './carrito.component.html',\n  styleUrls: ['./carrito.component.css']\n})], CarritoComponent);","map":{"version":3,"names":["Component","jsPDF","CarritoComponent","constructor","carritosService","detallesServices","authService","personaAutenticada","getUsuarioAutenticado","correo","codigoAutenticada","codigo","ngOnInit","carritos","getCarrito","detalles","getDetalleCarrito","realizarCompra","document","querySelectorAll","forEach","el","HTMLElement","style","display","formElement","getElementById","formToPrint","cloneNode","element","remove","doc","fromHTML","save","console","error","crearFacturas","subscribe","response","log","eliminarDetalle","det","undefined","deleteDetalle","result","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ROG ZEPHYRUS\\Documents\\GitHub\\ProyectoFinal\\ProyectoFinal\\src\\app\\pages\\carrito\\carrito.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { CarritoService } from '../services/carrito.service';\nimport { DetalleFacturaService } from '../services/detalle-factura.service';\nimport * as jsPDF from 'jspdf';\nimport { DetalleFactura } from 'src/app/domain/DetalleFactura';\n\n@Component({\n  selector: 'app-carrito',\n  templateUrl: './carrito.component.html',\n  styleUrls: ['./carrito.component.css']\n})\nexport class CarritoComponent implements OnInit {\n  carritos: any// Un array para almacenar los productos\n  detalles:any\n\n  constructor(private carritosService: CarritoService, private detallesServices: DetalleFacturaService, private authService: AuthService) { } // Inyecta tu servicio aquí\n\n  personaAutenticada = this.authService.getUsuarioAutenticado().correo\n  codigoAutenticada = this.authService.getUsuarioAutenticado().codigo\n\n  ngOnInit(): void {\n    this.carritos = this.carritosService.getCarrito(this.codigoAutenticada);\n    this.detalles = this.detallesServices.getDetalleCarrito(this.codigoAutenticada);\n  }\n\n  realizarCompra(){\n    // Asegúrate de que la imagen no se muestra en la impresión\n    document.querySelectorAll('.no-print').forEach(el => {\n      if (el instanceof HTMLElement) {\n        el.style.display = 'none';\n      }\n    });\n\n    // Encuentra el formulario que deseas imprimir\n    const formElement = document.getElementById('frm');\n\n    if (formElement) {\n      // Clona el formulario que deseas imprimir\n      const formToPrint = formElement.cloneNode(true);\n\n      // Asegúrate de que el clon es un elemento HTML para poder manipularlo\n      if (formToPrint instanceof HTMLElement) {\n        // Elimina todos los elementos con la clase 'no-print' del clon\n        formToPrint.querySelectorAll('.no-print').forEach(element => {\n          element.remove();\n        });\n\n        // Crea una nueva instancia de jsPDF\n        const doc = new jsPDF();\n\n        // Renderiza el clon en el PDF, no el formulario original\n        doc.fromHTML(formToPrint, 20, 5, {\n          'width': 170  // Asegúrate de establecer un ancho si es necesario\n        }, () => {\n          // Guarda el PDF\n          doc.save('Factura.pdf');\n        });\n\n        // Vuelve a mostrar los elementos que habían sido ocultados, si es necesario\n        document.querySelectorAll('.no-print').forEach(el => {\n          if (el instanceof HTMLElement) {\n            el.style.display = '';\n          }\n        });\n      }\n      } else {\n        console.error('El formulario con id \"frm\" no se encuentra en el DOM.');\n      }\n        this.detallesServices.crearFacturas(this.codigoAutenticada).subscribe(\n          response => {\n            if (typeof response === 'string') {\n              // La respuesta es un mensaje de éxito como texto\n              console.log(response);\n              // Puedes mostrar este mensaje en tu interfaz de usuario si es necesario\n            } else {\n              // La respuesta es un objeto JSON válido, puedes manejarlo según corresponda\n              console.log(response);\n            }\n          },\n          error => {\n            console.error(error);\n            // Manejar el error según tus necesidades\n          }\n      );\n  }\n\n  eliminarDetalle(det: DetalleFactura){\n    if (det.codigo !== undefined) {\n      const codigo: number = det.codigo;\n      \n    this.carritosService.deleteDetalle(codigo).subscribe(\n      (result: string) => {\n        console.log(result); // Muestra el mensaje de éxito en la consola\n        // Aquí puedes realizar acciones adicionales según el mensaje de éxito\n      },\n      error => {\n        console.error(error); // Muestra el error en la consola\n        // Manejar el error según tus necesidades\n      }\n    );\n    } else {\n      console.error('El código está indefinido.');\n      // Puedes manejar este caso según sea necesario, como lanzar una excepción o mostrar un mensaje de error\n    }\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}