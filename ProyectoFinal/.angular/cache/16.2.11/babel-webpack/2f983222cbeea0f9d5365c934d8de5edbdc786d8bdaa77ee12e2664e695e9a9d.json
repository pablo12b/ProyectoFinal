{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/app/enviroment/environment';\nexport let AuthService = class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(correo, contra) {\n    let url = enviroment.WS_PATH + \"/personas/login\";\n    return this.http.post(url, {\n      correo,\n      contra\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error(\"An error occurred\", error);\n    return throwError(error);\n  }\n  crearPersona(persona) {\n    let url = environment.WS_PATH + \"/personas/crear\";\n    return this.http.post(url, persona);\n  }\n  setUsuarioAutenticado(usuario) {\n    this.usuarioAutenticado = usuario;\n  }\n  // Método para obtener el usuario autenticado\n  getUsuarioAutenticado() {\n    return this.usuarioAutenticado;\n  }\n  // Método para verificar si el usuario está autenticado\n  estaAutenticado() {\n    return !!this.usuarioAutenticado;\n  }\n  cerrarSesion() {\n    return this.usuarioAutenticado = null;\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);","map":{"version":3,"names":["Injectable","environment","AuthService","constructor","http","login","correo","contra","url","enviroment","WS_PATH","post","pipe","catchError","handleError","error","console","throwError","crearPersona","persona","setUsuarioAutenticado","usuario","usuarioAutenticado","getUsuarioAutenticado","estaAutenticado","cerrarSesion","__decorate","providedIn"],"sources":["C:\\Users\\ROG ZEPHYRUS\\Documents\\GitHub\\ProyectoFinal\\ProyectoFinal\\src\\app\\pages\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cliente } from 'src/app/domain/cliente';\nimport { environment } from 'src/app/enviroment/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private usuarioAutenticado : any\n    constructor(private http: HttpClient) {}\n\n    login(correo: string, contra: string): Observable<any> {\n        let url = enviroment.WS_PATH + \"/personas/login\";\n        return this.http.post<any>(url, { correo, contra }).pipe(\n          catchError(this.handleError)\n        );\n      }\n\n   private handleError(error: any) {\n    console.error(\"An error occurred\", error);\n    return throwError(error);\n}\n\ncrearPersona(persona : Persona){\n    let url = environment.WS_PATH + \"/personas/crear\"\n    return this.http.post<any>(url,persona)\n}\n\nsetUsuarioAutenticado(usuario: any) {\n    this.usuarioAutenticado = usuario;\n  }\n\n  // Método para obtener el usuario autenticado\n  getUsuarioAutenticado() {\n    return this.usuarioAutenticado;\n  }\n\n  // Método para verificar si el usuario está autenticado\n  estaAutenticado(): boolean {\n    return !!this.usuarioAutenticado;\n  }\n\n  cerrarSesion(){\n    return this.usuarioAutenticado =null\n  }\n}\n\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,WAAW,QAAQ,gCAAgC;AAKrD,WAAMC,WAAW,GAAjB,MAAMA,WAAW;EAEpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,KAAKA,CAACC,MAAc,EAAEC,MAAc;IAChC,IAAIC,GAAG,GAAGC,UAAU,CAACC,OAAO,GAAG,iBAAiB;IAChD,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAMH,GAAG,EAAE;MAAEF,MAAM;MAAEC;IAAM,CAAE,CAAC,CAACK,IAAI,CACtDC,UAAU,CAAC,IAAI,CAACC,WAAW,CAAC,CAC7B;EACH;EAEKA,WAAWA,CAACC,KAAU;IAC7BC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAOE,UAAU,CAACF,KAAK,CAAC;EAC5B;EAEAG,YAAYA,CAACC,OAAiB;IAC1B,IAAIX,GAAG,GAAGP,WAAW,CAACS,OAAO,GAAG,iBAAiB;IACjD,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAMH,GAAG,EAACW,OAAO,CAAC;EAC3C;EAEAC,qBAAqBA,CAACC,OAAY;IAC9B,IAAI,CAACC,kBAAkB,GAAGD,OAAO;EACnC;EAEA;EACAE,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACD,kBAAkB;EAChC;EAEA;EACAE,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACF,kBAAkB;EAClC;EAEAG,YAAYA,CAAA;IACV,OAAO,IAAI,CAACH,kBAAkB,GAAE,IAAI;EACtC;CACD;AAtCYpB,WAAW,GAAAwB,UAAA,EAHvB1B,UAAU,CAAC;EACV2B,UAAU,EAAE;CACb,CAAC,C,EACWzB,WAAW,CAsCvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}