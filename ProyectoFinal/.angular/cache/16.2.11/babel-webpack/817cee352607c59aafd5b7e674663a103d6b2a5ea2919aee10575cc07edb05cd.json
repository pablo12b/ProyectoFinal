{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {}\n  // Método para establecer el usuario actual\n  setCurrentUser(user) {\n    this.currentUser = user;\n    // Aquí también podrías almacenar la información del usuario en el almacenamiento local o en una cookie\n  }\n  // Método para obtener el usuario actual\n  getCurrentUser() {\n    return this.currentUser;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","setCurrentUser","user","currentUser","getCurrentUser","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ROG ZEPHYRUS\\Documents\\GitHub\\ProyectoFinal\\ProyectoFinal\\src\\app\\pages\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private currentUser: any; // Reemplaza 'any' con tu tipo de datos de usuario, si lo tienes\n\n  constructor() {}\n\n  // Método para establecer el usuario actual\n  setCurrentUser(user: any) {\n    this.currentUser = user;\n    // Aquí también podrías almacenar la información del usuario en el almacenamiento local o en una cookie\n  }\n\n  // Método para obtener el usuario actual\n  getCurrentUser() {\n    return this.currentUser;\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,WAAW;EAItBC,YAAA,GAAe;EAEf;EACAC,cAAcA,CAACC,IAAS;IACtB,IAAI,CAACC,WAAW,GAAGD,IAAI;IACvB;EACF;EAEA;EACAE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACD,WAAW;EACzB;EAAC,QAAAE,CAAA,G;qBAfUN,WAAW;EAAA;EAAA,QAAAO,EAAA,G;WAAXP,WAAW;IAAAQ,OAAA,EAAXR,WAAW,CAAAS,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}