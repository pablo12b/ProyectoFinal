{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let SignupComponent = class SignupComponent {\n  constructor(formBuilder, clienteService, router, authService, carritoService) {\n    this.formBuilder = formBuilder;\n    this.clienteService = clienteService;\n    this.router = router;\n    this.authService = authService;\n    this.carritoService = carritoService;\n    this.signUpForm = this.formBuilder.group({\n      nombre: ['', Validators.required],\n      dni: ['', Validators.required],\n      direccion: ['', Validators.required],\n      saldo: [0, [Validators.required, Validators.min(0)]],\n      usuario: ['', Validators.required],\n      contras: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.signUpForm.valid) {\n      const cliente = this.signUpForm.value;\n      this.authService.setCurrentUser(cliente); // Asumiendo que solo quieres almacenar el nombre de usuario\n      this.authService.setDNI(cliente.dni); // Asumiendo que solo quieres almacenar el nombre de usuario\n      this.clienteService.saveClientes(cliente).subscribe(response => {\n        console.log('Registro exitoso', response);\n        // Aquí puedes manejar la respuesta del servidor, como redirigir al usuario o mostrar un mensaje de éxito\n        this.router.navigate(['/paginas/login']);\n      }, error => {\n        console.error('Error al registrar el cliente', error);\n        // Aquí puedes manejar errores, como mostrar un mensaje al usuario\n      });\n    }\n  }\n};\n\nSignupComponent = __decorate([Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})], SignupComponent);","map":{"version":3,"names":["Component","Validators","SignupComponent","constructor","formBuilder","clienteService","router","authService","carritoService","signUpForm","group","nombre","required","dni","direccion","saldo","min","usuario","contras","onSubmit","valid","cliente","value","setCurrentUser","setDNI","saveClientes","subscribe","response","console","log","navigate","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ROG ZEPHYRUS\\Documents\\GitHub\\ProyectoFinal\\ProyectoFinal\\src\\app\\pages\\signup\\signup.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ClienteService } from '../services/cliente.service';\nimport { Router } from '@angular/router'; // Importa Router\nimport { Cliente } from 'src/app/domain/cliente';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent {\n  signUpForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private clienteService: ClienteService, private router: Router, private authService: AuthService, private carritoService: ) {\n    this.signUpForm = this.formBuilder.group({\n      nombre: ['', Validators.required],\n      dni: ['', Validators.required],\n      direccion: ['', Validators.required],\n      saldo: [0, [Validators.required, Validators.min(0)]],\n      usuario: ['', Validators.required],\n      contras: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    if (this.signUpForm.valid) {\n      const cliente: Cliente = this.signUpForm.value;\n      this.authService.setCurrentUser(cliente); // Asumiendo que solo quieres almacenar el nombre de usuario\n      this.authService.setDNI(cliente.dni!); // Asumiendo que solo quieres almacenar el nombre de usuario\n      this.clienteService.saveClientes(cliente).subscribe(\n        response => {\n          console.log('Registro exitoso', response);\n          // Aquí puedes manejar la respuesta del servidor, como redirigir al usuario o mostrar un mensaje de éxito\n          this.router.navigate(['/paginas/login']);\n        },\n        error => {\n          console.error('Error al registrar el cliente', error);\n          // Aquí puedes manejar errores, como mostrar un mensaje al usuario\n        }\n      );\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAW5D,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAG1BC,YAAoBC,WAAwB,EAAUC,cAA8B,EAAUC,MAAc,EAAUC,WAAwB,EAAUC,cAAe;IAAnJ,KAAAJ,WAAW,GAAXA,WAAW;IAAuB,KAAAC,cAAc,GAAdA,cAAc;IAA0B,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,cAAc,GAAdA,cAAc;IACpK,IAAI,CAACC,UAAU,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACvCC,MAAM,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACjCC,GAAG,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ,CAAC;MAC9BE,SAAS,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACW,QAAQ,CAAC;MACpCG,KAAK,EAAE,CAAC,CAAC,EAAE,CAACd,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACe,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACpDC,OAAO,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACW,QAAQ,CAAC;MAClCM,OAAO,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACW,QAAQ;KAClC,CAAC;EACJ;EAEAO,QAAQA,CAAA;IACN,IAAI,IAAI,CAACV,UAAU,CAACW,KAAK,EAAE;MACzB,MAAMC,OAAO,GAAY,IAAI,CAACZ,UAAU,CAACa,KAAK;MAC9C,IAAI,CAACf,WAAW,CAACgB,cAAc,CAACF,OAAO,CAAC,CAAC,CAAC;MAC1C,IAAI,CAACd,WAAW,CAACiB,MAAM,CAACH,OAAO,CAACR,GAAI,CAAC,CAAC,CAAC;MACvC,IAAI,CAACR,cAAc,CAACoB,YAAY,CAACJ,OAAO,CAAC,CAACK,SAAS,CACjDC,QAAQ,IAAG;QACTC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAAC;QACzC;QACA,IAAI,CAACrB,MAAM,CAACwB,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;MAC1C,CAAC,EACDC,KAAK,IAAG;QACNH,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD;MACF,CAAC,CACF;;EAEL;CACD;;AAhCY7B,eAAe,GAAA8B,UAAA,EAL3BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWjC,eAAe,CAgC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}